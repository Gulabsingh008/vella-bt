import os
import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.errors import RPCError
from datetime import datetime, timedelta

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§®
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        # ‡§∏‡§≠‡•Ä ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏
        self.bots_config = [
            {
                "name": "bot1",
                "api_id": int(os.getenv("BOT1_API_ID")),
                "api_hash": os.getenv("BOT1_API_HASH"),
                "bot_token": os.getenv("BOT1_TOKEN")
            },
            {
                "name": "bot2", 
                "api_id": int(os.getenv("BOT2_API_ID")),
                "api_hash": os.getenv("BOT2_API_HASH"),
                "bot_token": os.getenv("BOT2_TOKEN")
            },
            {
                "name": "control_bot",
                "api_id": int(os.getenv("CONTROL_API_ID")),
                "api_hash": os.getenv("CONTROL_API_HASH"),
                "bot_token": os.getenv("CONTROL_BOT_TOKEN")
            }
        ]
        
        self.admin_ids = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]
        self.spam_interval = int(os.getenv("SPAM_INTERVAL", 3600))  # ‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü 1 ‡§ò‡§Ç‡§ü‡§æ
        self.auto_spam = False
        self.last_spam_time = {}
        self.active_bots = []

    def validate_credentials(self):
        """‡§∏‡§≠‡•Ä ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"""
        for bot in self.bots_config:
            if not all(bot.values()):
                logger.error(f"‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏: {bot['name']}")
                return False
                
            if ":" not in bot["bot_token"]:
                logger.error(f"‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ü‡•ã‡§ï‡§® ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: {bot['name']}")
                return False
                
        return True

    async def initialize_bots(self):
        """‡§∏‡§≠‡•Ä ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç (Pyrogram v2+ ‡§ï‡§Ç‡§™‡•á‡§ü‡§ø‡§¨‡§≤)"""
        if not self.validate_credentials():
            raise ValueError("‡§è‡§ï ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡•â‡§ü ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡§Ç")

        for config in self.bots_config:
            try:
                bot = Client(
                    name=config["name"],
                    api_id=config["api_id"],
                    api_hash=config["api_hash"],
                    bot_token=config["bot_token"],
                    in_memory=True  # Pyrogram v2+ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§∞‡•Ç‡§∞‡•Ä
                )
                
                # ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏
                if config["name"] == "control_bot":
                    self._add_control_handlers(bot)
                else:
                    self._add_basic_handlers(bot)
                    
                await bot.start()
                self.active_bots.append(bot)
                logger.info(f"‚úÖ {config['name']} ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ @{(await bot.get_me()).username}")
                
            except Exception as e:
                logger.error(f"‚ùå {config['name']} ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ: {str(e)}")
                raise

    def _add_basic_handlers(self, bot):
        """‡§¨‡•á‡§∏‡§ø‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"""
        @bot.on_message(filters.command("start"))
        async def start_handler(client, message):
            await message.reply(f"ü§ñ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç {client.me.username} ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å")

    def _add_control_handlers(self, bot):
        """‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"""
        @bot.on_message(filters.command("spam_on") & filters.user(self.admin_ids))
        async def turn_on(client, message):
            self.auto_spam = True
            await message.reply("‚úÖ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ")
            logger.info("‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§ö‡§æ‡§≤‡•Ç (‡§è‡§°‡§Æ‡§ø‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)")

        @bot.on_message(filters.command("spam_off") & filters.user(self.admin_ids))
        async def turn_off(client, message):
            self.auto_spam = False
            await message.reply("üõë ‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ")
            logger.info("‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ (‡§è‡§°‡§Æ‡§ø‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)")

    async def spam_channels(self):
        """‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡•Ç‡§™"""
        SPAM_MESSAGES = [
            "üî• Follow ‡§ï‡§∞‡•ã ‡§ö‡•à‡§®‡§≤!",
            "üì¢ ‡§Ü‡§ú ‡§ï‡•Ä ‡§®‡§à ‡§Ö‡§™‡§°‡•á‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç!",
            "üì° Tech, Jobs ‡§î‡§∞ Fun ‡§è‡§ï ‡§ú‡§ó‡§π!",
            "üéØ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•ã Grow ‡§ï‡§∞‡•á!",
            "üß† Daily Knowledge Boost ‡§≤‡•ã!"
        ]
        
        while True:
            if self.auto_spam:
                for bot in self.active_bots:
                    if "control" in bot.name:  # ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡•á‡§Ç
                        continue
                        
                    try:
                        async for dialog in bot.get_dialogs():
                            if dialog.chat.type in ["channel", "supergroup"]:
                                chat_id = dialog.chat.id
                                last_time = self.last_spam_time.get(chat_id, datetime.min)
                                
                                if (datetime.now() - last_time) > timedelta(seconds=self.spam_interval):
                                    for msg in SPAM_MESSAGES:
                                        try:
                                            await bot.send_message(chat_id, msg)
                                            await asyncio.sleep(5)  # Anti-spam delay
                                        except RPCError as e:
                                            logger.warning(f"{bot.me.username}: {e}")
                                    
                                    self.last_spam_time[chat_id] = datetime.now()
                    except Exception as e:
                        logger.error(f"‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {bot.name} - {str(e)}")
            
            await asyncio.sleep(60)  # ‡§π‡§∞ ‡§Æ‡§ø‡§®‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç

async def main():
    manager = BotManager()
    await manager.initialize_bots()
    asyncio.create_task(manager.spam_channels())
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‡§¨‡•â‡§ü ‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...")
    except Exception as e:
        logger.error(f"‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")
