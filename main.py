import os
import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.errors import RPCError
from datetime import datetime, timedelta

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§®
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# main.py ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§°‡•Ä‡§¨‡§ó ‡§≤‡§æ‡§á‡§®‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
print("Actual BOT1_TOKEN:", repr(os.getenv("BOT1_TOKEN")))
print("Actual BOT2_TOKEN:", repr(os.getenv("BOT2_TOKEN")))
print("Actual CONTROL_BOT_TOKEN:", repr(os.getenv("CONTROL_BOT_TOKEN")))

# main.py ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
print("BOT1_TOKEN first 5 chars:", repr(os.getenv("BOT1_TOKEN")[:5]),
print("BOT1_TOKEN last 5 chars:", repr(os.getenv("BOT1_TOKEN")[-5:]),
# main.py ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
print("BOT2_TOKEN first 5 chars:", repr(os.getenv("BOT2_TOKEN")[:5]),
print("BOT2_TOKEN last 5 chars:", repr(os.getenv("BOT2_TOKEN")[-5:])



class BotManager:
    def __init__(self):
        # ‡§∏‡§≠‡•Ä ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§ü‡•ã‡§ï‡§®‡•ç‡§∏ (‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§∏‡•á)
        self.bot_tokens = {
            "worker1": "BOT1_TOKEN",
            "worker2": "BOT2_TOKEN",
            "control": "CONTROL_BOT_TOKEN"
        }
        
        self.admin_ids = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]
        self.spam_interval = int(os.getenv("SPAM_INTERVAL", 3600))  # ‡§°‡§ø‡§´‡•â‡§≤‡•ç‡§ü 1 ‡§ò‡§Ç‡§ü‡§æ
        self.auto_spam = False
        self.last_spam_time = {}
        self.active_bots = []

    def validate_tokens(self):
    """‡§∏‡§≠‡•Ä ‡§ü‡•ã‡§ï‡§®‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§ñ‡•ç‡§§‡•Ä ‡§∏‡•á ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"""
        for name, token in self.bot_tokens.items():
            # ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç
            cleaned_token = token.strip()
            
            # ‡§ü‡•ã‡§ï‡§® ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç (19:35... ‡§ú‡•à‡§∏‡§æ ‡§™‡•à‡§ü‡§∞‡•ç‡§®)
            if (not cleaned_token or 
                len(cleaned_token.split(':')) != 2 or 
                not cleaned_token.split(':')[0].isdigit() or 
                not cleaned_token.split(':')[1].startswith('AA')):
                
                logger.error(f"‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ü‡•ã‡§ï‡§® {name}: {repr(token)}")
                logger.error(f"‡§∏‡§æ‡§´ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ü‡•ã‡§ï‡§®: {repr(cleaned_token)}")
                return False
                
            self.bot_tokens[name] = cleaned_token
        return True

    async def initialize_bots(self):
        """‡§∏‡§≠‡•Ä ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç"""
        if not self.validate_tokens():
            raise ValueError("‡§è‡§ï ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡•â‡§ü ‡§ü‡•ã‡§ï‡§® ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡§Ç")

        # ‡§µ‡§∞‡•ç‡§ï‡§∞ ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        for name, token in self.bot_tokens.items():
            if name == "control":
                continue
                
            try:
                bot = Client(name, bot_token=token)
                self._add_basic_handlers(bot)
                await bot.start()
                self.active_bots.append(bot)
                logger.info(f"‚úÖ {name} ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ @{bot.me.username}")
            except Exception as e:
                logger.error(f"‚ùå {name} ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ: {str(e)}")

        # ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        try:
            control_bot = Client("control", bot_token=self.bot_tokens["control"])
            self._add_control_handlers(control_bot)
            await control_bot.start()
            self.active_bots.append(control_bot)
            logger.info(f"üéõ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ @{control_bot.me.username}")
        except Exception as e:
            logger.error(f"‚ùå ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ: {str(e)}")

    def _add_basic_handlers(self, bot):
        """‡§¨‡•á‡§∏‡§ø‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"""
        @bot.on_message(filters.command("start"))
        async def start_handler(client, message):
            await message.reply(f"ü§ñ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç {client.me.username} ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Å\n"
                              f"‡§∏‡•ç‡§ü‡•á‡§ü‡§∏: {'‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' if self.auto_spam else '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'}")

    def _add_control_handlers(self, bot):
        """‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"""
        @bot.on_message(filters.command("spam_on") & filters.user(self.admin_ids))
        async def turn_on(client, message):
            self.auto_spam = True
            await message.reply("‚úÖ ‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ")
            logger.info("‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§ö‡§æ‡§≤‡•Ç (‡§è‡§°‡§Æ‡§ø‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)")

        @bot.on_message(filters.command("spam_off") & filters.user(self.admin_ids))
        async def turn_off(client, message):
            self.auto_spam = False
            await message.reply("üõë ‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ")
            logger.info("‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ (‡§è‡§°‡§Æ‡§ø‡§® ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)")

        @bot.on_message(filters.command("status") & filters.user(self.admin_ids))
        async def bot_status(client, message):
            status = []
            for bot in self.active_bots:
                try:
                    status.append(f"‚Ä¢ @{bot.me.username}: {'üü¢' if await bot.get_me() else 'üî¥'}")
                except:
                    status.append(f"‚Ä¢ {bot.name}: üî¥ (‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§®)")
            
            await message.reply(
                "ü§ñ ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏:\n" + "\n".join(status) +
                f"\n\n‡§∏‡•ç‡§™‡•à‡§Æ ‡§Æ‡•ã‡§°: {'‡§ö‡§æ‡§≤‡•Ç' if self.auto_spam else '‡§¨‡§Ç‡§¶'}"
            )

    async def spam_channels(self):
        """‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡•Ç‡§™"""
        while True:
            if self.auto_spam:
                for bot in self.active_bots[:-1]:  # ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞
                    try:
                        async for dialog in bot.get_dialogs():
                            if dialog.chat.type in ["channel", "supergroup"]:
                                chat_id = dialog.chat.id
                                last_time = self.last_spam_time.get(chat_id, datetime.min)
                                
                                if (datetime.now() - last_time) > timedelta(seconds=self.spam_interval):
                                    try:
                                        await bot.send_message(
                                            chat_id,
                                            "üì¢ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç!\n"
                                            "üëâ @example_channel"
                                        )
                                        self.last_spam_time[chat_id] = datetime.now()
                                        logger.info(f"{bot.me.username} ‡§®‡•á {chat_id} ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§æ")
                                    except RPCError as e:
                                        logger.warning(f"‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤: {e}")
                    except Exception as e:
                        logger.error(f"‡§∏‡•ç‡§™‡•à‡§Æ ‡§≤‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
            
            await asyncio.sleep(60)  # ‡§π‡§∞ ‡§Æ‡§ø‡§®‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç

async def main():
    manager = BotManager()
    await manager.initialize_bots()
    
    # ‡§∏‡•ç‡§™‡•à‡§Æ ‡§ü‡§æ‡§∏‡•ç‡§ï ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
    asyncio.create_task(manager.spam_channels())
    
    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡§®‡§ø‡§Ç‡§ó ‡§∞‡§ñ‡•á‡§Ç
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        # ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§≤‡•ã‡§° ‡§ï‡§ø‡§è ‡§ó‡§è ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç (‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è)
        logger.info("‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        logger.info(f"BOT1_TOKEN: {'‡§Æ‡•å‡§ú‡•Ç‡§¶' if os.getenv('BOT1_TOKEN') else '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ'}")
        logger.info(f"BOT2_TOKEN: {'‡§Æ‡•å‡§ú‡•Ç‡§¶' if os.getenv('BOT2_TOKEN') else '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ'}")
        logger.info(f"CONTROL_BOT_TOKEN: {'‡§Æ‡•å‡§ú‡•Ç‡§¶' if os.getenv('CONTROL_BOT_TOKEN') else '‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ'}")
        
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‡§¨‡•â‡§ü ‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...")
    except Exception as e:
        logger.error(f"‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}")
